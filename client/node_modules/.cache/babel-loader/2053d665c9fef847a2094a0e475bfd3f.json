{"ast":null,"code":"import { makeAutoObservable } from \"mobx\";\nimport AuthService from \"../services/AuthService\";\nimport axios from 'axios';\nimport { API_URL } from \"../http\";\nexport default class Store {\n  constructor() {\n    this.user = {};\n    this.isAuth = false;\n    this.isLoading = false;\n    makeAutoObservable(this);\n  }\n\n  setAuth(isAuth) {\n    this.isAuth = isAuth;\n  }\n\n  setLoading(isLoading) {\n    this.isLoading = isLoading;\n  }\n\n  setUser(user) {\n    this.user = user;\n  }\n\n  async login(email, password) {\n    try {\n      const response = await AuthService.login(email, password);\n      console.log(response);\n      localStorage.setItem('token', response.data.accessToken);\n      this.setAuth(true);\n      this.setUser(response.data.user);\n    } catch (e) {\n      return e;\n    }\n  }\n\n  async registration(email, password) {\n    try {\n      const response = await AuthService.registration(email, password);\n      console.log(response);\n      localStorage.setItem('token', response.data.accessToken);\n      this.setAuth(true);\n      this.setUser(response.data.user);\n    } catch (e) {\n      return e;\n    }\n  }\n\n  async logout() {\n    try {\n      const response = await AuthService.logout();\n      console.log(response);\n      localStorage.removeItem('token');\n      this.setAuth(false);\n      this.setUser({});\n    } catch (e) {\n      return e;\n    }\n  }\n\n  async checkAuth() {\n    this.setLoading(true);\n\n    try {\n      const response = await axios.get(`${API_URL}/refresh`, {\n        withCredentials: true\n      });\n      console.log(response);\n      localStorage.setItem('token', response.data.accessToken);\n      this.setAuth(true);\n      this.setUser(response.data.user);\n    } catch (e) {\n      return e;\n    } finally {\n      this.setLoading(false);\n    }\n  }\n\n}","map":{"version":3,"sources":["C:/Users/User/WebstormProjects/coligio/client/src/store/store.js"],"names":["makeAutoObservable","AuthService","axios","API_URL","Store","constructor","user","isAuth","isLoading","setAuth","setLoading","setUser","login","email","password","response","console","log","localStorage","setItem","data","accessToken","e","registration","logout","removeItem","checkAuth","get","withCredentials"],"mappings":"AAAA,SAAQA,kBAAR,QAAiC,MAAjC;AACA,OAAOC,WAAP,MAAwB,yBAAxB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAAQC,OAAR,QAAsB,SAAtB;AAIA,eAAe,MAAMC,KAAN,CAAY;AAIvBC,EAAAA,WAAW,GAAG;AAAA,SAHdC,IAGc,GAHP,EAGO;AAAA,SAFdC,MAEc,GAFL,KAEK;AAAA,SADdC,SACc,GADF,KACE;AACVR,IAAAA,kBAAkB,CAAC,IAAD,CAAlB;AAEH;;AAEDS,EAAAA,OAAO,CAACF,MAAD,EAAS;AACZ,SAAKA,MAAL,GAAaA,MAAb;AACH;;AAEDG,EAAAA,UAAU,CAACF,SAAD,EAAY;AAClB,SAAKA,SAAL,GAAgBA,SAAhB;AACH;;AAEDG,EAAAA,OAAO,CAACL,IAAD,EAAM;AACT,SAAKA,IAAL,GAAYA,IAAZ;AACH;;AAEU,QAALM,KAAK,CAACC,KAAD,EAAQC,QAAR,EAAkB;AACzB,QAAI;AACA,YAAMC,QAAQ,GAAG,MAAMd,WAAW,CAACW,KAAZ,CAAkBC,KAAlB,EAAyBC,QAAzB,CAAvB;AACAE,MAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AACAG,MAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BJ,QAAQ,CAACK,IAAT,CAAcC,WAA5C;AACA,WAAKZ,OAAL,CAAa,IAAb;AACA,WAAKE,OAAL,CAAaI,QAAQ,CAACK,IAAT,CAAcd,IAA3B;AACH,KAND,CAME,OAAOgB,CAAP,EAAU;AACR,aAAOA,CAAP;AACH;AACJ;;AAEiB,QAAZC,YAAY,CAACV,KAAD,EAAQC,QAAR,EAAkB;AAChC,QAAI;AACA,YAAMC,QAAQ,GAAG,MAAMd,WAAW,CAACsB,YAAZ,CAAyBV,KAAzB,EAAgCC,QAAhC,CAAvB;AACAE,MAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AACAG,MAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BJ,QAAQ,CAACK,IAAT,CAAcC,WAA5C;AACA,WAAKZ,OAAL,CAAa,IAAb;AACA,WAAKE,OAAL,CAAaI,QAAQ,CAACK,IAAT,CAAcd,IAA3B;AACH,KAND,CAME,OAAOgB,CAAP,EAAU;AACR,aAAOA,CAAP;AACH;AACJ;;AAEW,QAANE,MAAM,GAAG;AACX,QAAI;AACA,YAAMT,QAAQ,GAAG,MAAMd,WAAW,CAACuB,MAAZ,EAAvB;AACAR,MAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AACAG,MAAAA,YAAY,CAACO,UAAb,CAAwB,OAAxB;AACA,WAAKhB,OAAL,CAAa,KAAb;AACA,WAAKE,OAAL,CAAa,EAAb;AACH,KAND,CAME,OAAOW,CAAP,EAAU;AACR,aAAOA,CAAP;AACH;AACJ;;AAEc,QAATI,SAAS,GAAE;AACb,SAAKhB,UAAL,CAAgB,IAAhB;;AACA,QAAI;AACA,YAAMK,QAAQ,GAAG,MAAMb,KAAK,CAACyB,GAAN,CAAW,GAAExB,OAAQ,UAArB,EAAgC;AAACyB,QAAAA,eAAe,EAAE;AAAlB,OAAhC,CAAvB;AACAZ,MAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AACAG,MAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BJ,QAAQ,CAACK,IAAT,CAAcC,WAA5C;AACA,WAAKZ,OAAL,CAAa,IAAb;AACA,WAAKE,OAAL,CAAaI,QAAQ,CAACK,IAAT,CAAcd,IAA3B;AACH,KAND,CAME,OAAOgB,CAAP,EAAU;AACR,aAAOA,CAAP;AACH,KARD,SAQU;AACN,WAAKZ,UAAL,CAAgB,KAAhB;AACH;AACJ;;AAtEsB","sourcesContent":["import {makeAutoObservable} from \"mobx\";\r\nimport AuthService from \"../services/AuthService\";\r\nimport axios from 'axios';\r\nimport {API_URL} from \"../http\";\r\n\r\n\r\n\r\nexport default class Store {\r\n    user = {} ;\r\n    isAuth = false;\r\n    isLoading = false;\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n\r\n    }\r\n\r\n    setAuth(isAuth) {\r\n        this.isAuth =isAuth;\r\n    }\r\n\r\n    setLoading(isLoading) {\r\n        this.isLoading =isLoading;\r\n    }\r\n\r\n    setUser(user){\r\n        this.user = user;\r\n    }\r\n\r\n    async login(email, password) {\r\n        try {\r\n            const response = await AuthService.login(email, password);\r\n            console.log(response)\r\n            localStorage.setItem('token', response.data.accessToken);\r\n            this.setAuth(true);\r\n            this.setUser(response.data.user);\r\n        } catch (e) {\r\n            return e;\r\n        }\r\n    }\r\n\r\n    async registration(email, password) {\r\n        try {\r\n            const response = await AuthService.registration(email, password);\r\n            console.log(response)\r\n            localStorage.setItem('token', response.data.accessToken);\r\n            this.setAuth(true);\r\n            this.setUser(response.data.user);\r\n        } catch (e) {\r\n            return e;\r\n        }\r\n    }\r\n\r\n    async logout() {\r\n        try {\r\n            const response = await AuthService.logout();\r\n            console.log(response)\r\n            localStorage.removeItem('token');\r\n            this.setAuth(false);\r\n            this.setUser({});\r\n        } catch (e) {\r\n            return e;\r\n        }\r\n    }\r\n\r\n    async checkAuth(){\r\n        this.setLoading(true);\r\n        try {\r\n            const response = await axios.get(`${API_URL}/refresh`, {withCredentials: true});\r\n            console.log(response)\r\n            localStorage.setItem('token', response.data.accessToken);\r\n            this.setAuth(true);\r\n            this.setUser(response.data.user);\r\n        } catch (e) {\r\n            return e;\r\n        } finally {\r\n            this.setLoading(false);\r\n        }\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}