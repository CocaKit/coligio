{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\WebstormProjects\\\\coligio\\\\client\\\\src\\\\UI\\\\CustomInput.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\"; // nodejs library to set properties for components\n\nimport PropTypes from \"prop-types\"; // nodejs library that concatenates classes\n\nimport classNames from \"classnames\"; // @material-ui/core components\n\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport Input from \"@material-ui/core/Input\";\nimport styles from \"../assets/jss/customInputStyle.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(styles);\nexport default function CustomInput(props) {\n  _s();\n\n  const classes = useStyles();\n  const {\n    formControlProps,\n    labelText,\n    id,\n    labelProps,\n    inputProps,\n    error,\n    white,\n    inputRootCustomClasses,\n    success,\n    handleChange,\n    type\n  } = props;\n  const labelClasses = classNames({\n    [\" \" + classes.labelRootError]: error,\n    [\" \" + classes.labelRootSuccess]: success && !error\n  });\n  const underlineClasses = classNames({\n    [classes.underlineError]: error,\n    [classes.underlineSuccess]: success && !error,\n    [classes.underline]: true,\n    [classes.whiteUnderline]: white\n  });\n  const marginTop = classNames({\n    [inputRootCustomClasses]: inputRootCustomClasses !== undefined\n  });\n  const inputClasses = classNames({\n    [classes.input]: true,\n    [classes.whiteInput]: white\n  });\n  var formControlClasses;\n\n  if (formControlProps !== undefined) {\n    formControlClasses = classNames(formControlProps.className, classes.formControl);\n  } else {\n    formControlClasses = classes.formControl;\n  }\n\n  return /*#__PURE__*/_jsxDEV(FormControl, { ...formControlProps,\n    className: formControlClasses,\n    children: [labelText !== undefined ? /*#__PURE__*/_jsxDEV(InputLabel, {\n      className: classes.labelRoot + \" \" + labelClasses,\n      htmlFor: id,\n      ...labelProps,\n      children: labelText\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 17\n    }, this) : null, /*#__PURE__*/_jsxDEV(Input, {\n      classes: {\n        input: inputClasses,\n        root: marginTop,\n        disabled: classes.disabled,\n        underline: underlineClasses\n      },\n      id: id,\n      onChange: handleChange,\n      ...inputProps,\n      type: type\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 9\n  }, this);\n}\n\n_s(CustomInput, \"8g5FPXexvSEOsxdmU7HicukHGqY=\", false, function () {\n  return [useStyles];\n});\n\n_c = CustomInput;\nCustomInput.propTypes = {\n  labelText: PropTypes.node,\n  labelProps: PropTypes.object,\n  id: PropTypes.string,\n  inputProps: PropTypes.object,\n  formControlProps: PropTypes.object,\n  inputRootCustomClasses: PropTypes.string,\n  error: PropTypes.bool,\n  success: PropTypes.bool,\n  white: PropTypes.bool\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"CustomInput\");","map":{"version":3,"sources":["C:/Users/User/WebstormProjects/coligio/client/src/UI/CustomInput.js"],"names":["React","PropTypes","classNames","makeStyles","FormControl","InputLabel","Input","styles","useStyles","CustomInput","props","classes","formControlProps","labelText","id","labelProps","inputProps","error","white","inputRootCustomClasses","success","handleChange","type","labelClasses","labelRootError","labelRootSuccess","underlineClasses","underlineError","underlineSuccess","underline","whiteUnderline","marginTop","undefined","inputClasses","input","whiteInput","formControlClasses","className","formControl","labelRoot","root","disabled","propTypes","node","object","string","bool"],"mappings":"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","sourcesContent":["import React from \"react\";\r\n// nodejs library to set properties for components\r\nimport PropTypes from \"prop-types\";\r\n// nodejs library that concatenates classes\r\nimport classNames from \"classnames\";\r\n// @material-ui/core components\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport Input from \"@material-ui/core/Input\";\r\n\r\nimport styles from \"../assets/jss/customInputStyle.js\";\r\n\r\nconst useStyles = makeStyles(styles);\r\n\r\nexport default function CustomInput(props) {\r\n    const classes = useStyles();\r\n    const {\r\n        formControlProps,\r\n        labelText,\r\n        id,\r\n        labelProps,\r\n        inputProps,\r\n        error,\r\n        white,\r\n        inputRootCustomClasses,\r\n        success,\r\n        handleChange,\r\n        type\r\n    } = props;\r\n\r\n    const labelClasses = classNames({\r\n        [\" \" + classes.labelRootError]: error,\r\n        [\" \" + classes.labelRootSuccess]: success && !error\r\n    });\r\n    const underlineClasses = classNames({\r\n        [classes.underlineError]: error,\r\n        [classes.underlineSuccess]: success && !error,\r\n        [classes.underline]: true,\r\n        [classes.whiteUnderline]: white\r\n    });\r\n    const marginTop = classNames({\r\n        [inputRootCustomClasses]: inputRootCustomClasses !== undefined\r\n    });\r\n    const inputClasses = classNames({\r\n        [classes.input]: true,\r\n        [classes.whiteInput]: white\r\n    });\r\n    var formControlClasses;\r\n    if (formControlProps !== undefined) {\r\n        formControlClasses = classNames(\r\n            formControlProps.className,\r\n            classes.formControl\r\n        );\r\n    } else {\r\n        formControlClasses = classes.formControl;\r\n    }\r\n    return (\r\n        <FormControl {...formControlProps} className={formControlClasses}>\r\n            {labelText !== undefined ? (\r\n                <InputLabel\r\n                    className={classes.labelRoot + \" \" + labelClasses}\r\n                    htmlFor={id}\r\n                    {...labelProps}\r\n                >\r\n                    {labelText}\r\n                </InputLabel>\r\n            ) : null}\r\n            <Input\r\n                classes={{\r\n                    input: inputClasses,\r\n                    root: marginTop,\r\n                    disabled: classes.disabled,\r\n                    underline: underlineClasses\r\n                }}\r\n                id={id}\r\n                onChange={handleChange}\r\n                {...inputProps}\r\n                type={type}\r\n            />\r\n        </FormControl>\r\n    );\r\n}\r\n\r\nCustomInput.propTypes = {\r\n    labelText: PropTypes.node,\r\n    labelProps: PropTypes.object,\r\n    id: PropTypes.string,\r\n    inputProps: PropTypes.object,\r\n    formControlProps: PropTypes.object,\r\n    inputRootCustomClasses: PropTypes.string,\r\n    error: PropTypes.bool,\r\n    success: PropTypes.bool,\r\n    white: PropTypes.bool\r\n};\r\n"]},"metadata":{},"sourceType":"module"}